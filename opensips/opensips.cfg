#
# OpenSIPS residential configuration script
#     by OpenSIPS Solutions <team@opensips-solutions.com>
#
# This script was generated via "make menuconfig", from
#   the "Residential" scenario.
# You can enable / disable more features / functionalities by
#   re-generating the scenario with different options.#
#
# Please refer to the Core CookBook at:
#      http://www.opensips.org/Resources/DocsCookbooks
# for a explanation of possible statements, functions and parameters.
#


####### Global Parameters #########

log_level=2
log_stderror=no
log_facility=LOG_LOCAL7

udp_workers=4

/* uncomment the following lines to enable debugging */
#debug_mode=yes

/* uncomment the next line to enable the auto temporary blacklisting of 
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns 
   lookup failures (default disabled) */
#dns_try_ipv6=yes

/* comment the next line to enable the auto discovery of local aliases
   based on reverse DNS on IPs */
auto_aliases=no

listen=udp:127.0.0.1:5060
listen=tcp:127.0.0.1:5060

####### Modules Section ########

#set module path
mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "working_mode_preset", "single-instance-no-db")


loadmodule "nathelper.so"
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "natping_partitions", 4)
modparam("nathelper", "received_avp", "$avp(received)")
modparam("nathelper", "sipping_from", "sip:pinger@securenetvox.net")
modparam("nathelper", "ping_threshold", 3)
modparam("nathelper", "max_pings_lost", 3)

loadmodule "mid_registrar.so"
modparam("mid_registrar", "mode", 1)
modparam("mid_registrar", "outgoing_expires", 3600)
modparam("mid_registrar", "received_avp", "$avp(received)")
modparam("mid_registrar", "retry_after", 30)

loadmodule "proto_udp.so"
loadmodule "proto_tcp.so"

loadmodule "regex.so"
loadmodule "textops.so"

loadmodule "rtpengine.so"
modparam("rtpengine", "rtpengine_sock", "udp:localhost:2223")

####### Routing Logic ########

# main request routing logic

route{

        route(INITIAL_CHECK);

        if (has_totag()) {

                # handle hop-by-hop ACK (no routing required)
                if ( is_method("ACK") && t_check_trans() ) {
                        t_relay();
                        exit;
                }

                # sequential request within a dialog should
                # take the path determined by record-routing
                if ( !loose_route() ) {
                        # we do record-routing for all our traffic, so we should not
                        # receive any sequential requests without Route hdr.
                        send_reply(404,"Not here");
                        exit;
                }

                # route it out to whatever destination was set by loose_route()
                # in $du (destination URI).
                route(RELAY);
                exit;
        }

        # CANCEL processing
        if (is_method("CANCEL")) {
                if (t_check_trans())
                        t_relay();
                exit;
        }

        # absorb retransmissions, but do not create transaction
        t_check_trans();

        # preloaded route checking
        if (loose_route()) {
                xlog("L_ERR", "Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
                if (!is_method("ACK")) {
                        send_reply(403,"Preload Route denied");
                }
                exit;
        }

        # record routing
        if (!is_method("REGISTER|MESSAGE")) {
                record_route();
        }


        # requests for my domain

        if (is_method("REGISTER")) {
                mid_registrar_save("location");

                switch ($retcode) {
                        case 1:
                                xlog("L_INFO", "forwarding REGISTER to main registrar...\n");
                                # We already have correct address in out R-URI
                                if (!t_relay()) {
                                        send_reply(500, "Server Internal Error");
                                }
                                break;
                        case 2:
                                xlog("L_INFO", "REGISTER has been absorbed!\n");
                                break;
                        default:
                                xlog("L_ERR", "mid-registrar error!\n");
                                send_reply(500, "Server Internal Error");
                }

                exit;
        }

        if ($rU==NULL) {
                # request with no Username in RURI
                send_reply(484,"Address Incomplete");
                exit;
        }

        route(DIAL_EXTENSION);
        
        route(CHECK_DIAL_DOMAIN);

        if (is_method("INVITE")) {
            xlog("L_INFO", "[REQUEST_ROUTE][NOT_OUR_INVITE]: [F=$fu R=$ru D=$du M=$rm IP=($si:$sp $Ri:$Rp) ID=$ci]");
            exit;
        }

        route(RELAY);
}

route[INITIAL_CHECK] {

        if (!mf_process_maxfwd_header(10)) {
                send_reply(483,"Too Many Hops");
                exit;
        }

        if (pcre_match("$rd", "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$$")) {
            if (pcre_match("$fd", "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$$")) {
                xlog("L_INFO", "[SPAM_CHECK][NOT_DOMAIN_BASED_URI]: [F=$fu R=$ru D=$du M=$rm IP=($si:$sp $Ri:$Rp) ID=$ci]");
                xlog("L_ALERT", "[FAIL2BAN] $si\n");
                exit;
            }
        }
        if (search("friendly-scanner|sipvicious|sipcli*|vaxasip|sip-scan|iWar|sipsak")) {
                xlog("L_INFO", "[SPAM_CHECK][FRIENDLYSCANNER_MESSAGE]: [F=$fu R=$ru D=$du M=$rm IP=($si:$sp $Ri:$Rp) ID=$ci]");
                xlog("L_ALERT", "[FAIL2BAN] $si\n");
                exit;
        }

        if (search_body("friendly-scanner|sipvicious|sipcli*|vaxasip|sip-scan|iWar|sipsak")) {
                xlog("L_INFO", "[SPAM_CHECK][FRIENDLYSCANNER_BODY]: [F=$fu R=$ru D=$du M=$rm IP=($si:$sp $Ri:$Rp) ID=$ci]");
                xlog("L_ALERT", "[FAIL2BAN] $si\n");
                exit;
        }
        return;
}

route[DIAL_EXTENSION] {
    if ($si != "3.122.4.81") {
        return;
    }

    if (!is_method("INVITE")) {
        return;
    }

    # do lookup with method filtering
    if (!mid_registrar_lookup("location","m")) {
            send_reply(404, "Not Found");
            exit;
    }
}

route[CHECK_DIAL_DOMAIN] {
    if (!is_method("INVITE")) {
        return;
    }    

    if ($rd =~ "securenetvox.net") {
        route(RELAY);
    }
}

route[RELAY] {
        # for INVITEs enable some additional helper routes
        if (is_method("INVITE")) {
                t_on_branch("PER_BRANCH_OPS");
                t_on_reply("HANDLE_NAT");
                t_on_failure("MISSED_CALL");
        }

        if (!t_relay()) {
                send_reply(500, "Internal Error");
        }
        exit;
}




branch_route[PER_BRANCH_OPS] {
        if (has_body_part("application/sdp")) {
            rtpengine_manage("replace-origin replace-session-connection loop-protect");
        }
        xlog("new branch at $ru\n");
}


onreply_route[HANDLE_NAT] { 

        if (has_body_part("application/sdp")) {
            rtpengine_manage("replace-origin replace-session-connection loop-protect");
        }
        xlog("incoming reply\n");
}


failure_route[MISSED_CALL] {
        if (t_was_cancelled()) {
            rtpengine_delete();
            exit;
        }
}
